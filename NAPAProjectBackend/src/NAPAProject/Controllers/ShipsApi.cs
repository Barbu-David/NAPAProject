/*
 * NAPA project
 *
 * NAPA trainee assignment
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using NAPAProject.Attributes;
using NAPAProject.Models;
using NAPAProject.Data;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Linq;

namespace NAPAProject.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>

    [ApiController]
    public class ShipsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>

        private readonly AppDbContext _context;

        public ShipsApiController(AppDbContext context)
        {
            _context = context;
        }


        /// <remarks>Adds a new ship to the data base</remarks>
        /// <param name="addShipRequest">Ship details</param>
        /// <response code="201">Ship created successfully</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/ships")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddShip")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Ship created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> AddShip([FromBody]AddShipRequest addShipRequest)
        {

            if (!ModelState.IsValid)
                return BadRequest("Invalid ship data.");
            
            var ship = new Ship
            {
                Name  = addShipRequest.Name,
                Speed = addShipRequest.Speed
            };

            try
            {
                _context.Ships.Add(ship);
                await _context.SaveChangesAsync();
                return Created($"/ships/{Uri.EscapeDataString(ship.Name)}", ship.Name);
            }
            catch (DbUpdateException dbEx)
            {
                        if (dbEx.InnerException?.Message.Contains("UNIQUE constraint failed") == true)
                         {
                              return BadRequest($"A ship with the name '{ship.Name}' already exists.");
                        }

                return StatusCode(500, "An error occurred while saving the ship.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a ship</remarks>
        /// <param name="name">The name for a ship.</param>
        /// <response code="204">Successful delete</response>
        /// <response code="404">Ship not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/ships/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteShip")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Ship not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> DeleteShip([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name)
        {
            try
            {
                var ship = await _context.Ships.FindAsync(name);

                if (ship == null)
                {
                     return NotFound($"Ship with name '{name}' not found.");
                }

                _context.Ships.Remove(ship);
                await _context.SaveChangesAsync();

                return NoContent(); // 204
            }
            catch (DbUpdateException)
            {
                return StatusCode(500, "A database error occurred while deleting the ship.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves the top speed of a specific ship</remarks>
        /// <param name="name">The name for a ship.</param>
        /// <response code="200">Ship top speed</response>
        /// <response code="404">Ship not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/ships/{name}/topSpeed")]
        [ValidateModelState]
        [SwaggerOperation("GetShipSpeed")]
        [SwaggerResponse(statusCode: 200, type: typeof(int), description: "Ship top speed")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Ship not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetShipSpeed([FromRoute (Name = "name")][Required]string name)
        {
            try
            {
            var ship = await _context.Ships.FirstOrDefaultAsync(s => s.Name == name);

            if (ship == null)
            {
               return NotFound($"Ship with name {name} not found.");
            }

           return Ok(ship.Speed);
            }
            catch (Exception)
            {
                return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves the names of all the ships</remarks>
        /// <response code="200">The list of all ship names.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/ships")]
        [ValidateModelState]
        [SwaggerOperation("GetShips")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "The list of all ship names.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult>  GetShips()
        {
                try
                {
                    var allShips = await _context.Ships.ToListAsync(); 
                    var shipNames = allShips.Select(s => s.Name).ToList(); 

                    return Ok(shipNames);
                }
                catch (Exception)
                {
                    return StatusCode(500, "A database error occurred.");
                }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update the name of a specific ship</remarks>
        /// <param name="name">The name for a ship.</param>
        /// <param name="body">New ship name</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="404">Ship not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/ships/{name}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateShipName")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Ship not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdateShipName([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name, [FromBody]string body)
        {
            if (string.IsNullOrWhiteSpace(body))
            {
            return BadRequest("New name must be a non-empty string.");
            }

            try
            {
                var existingShip = await _context.Ships.FindAsync(name);
                if (existingShip == null)
                {
                    return NotFound($"Ship with name '{name}' not found.");
                }

                // Check if a ship already exists with the new name
                var nameConflict = await _context.Ships.AnyAsync(s => s.Name == body);
                if (nameConflict)
                {
                    return BadRequest($"A ship with name '{body}' already exists.");
                }

                // Create a new ship with the new name and same speed
                var renamedShip = new Ship
                {
                Name = body,
                Speed = existingShip.Speed
                };

                _context.Ships.Add(renamedShip);
                _context.Ships.Remove(existingShip);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception)
            {   
                return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update the top speed of a specific ship</remarks>
        /// <param name="name">The sname for a ship.</param>
        /// <param name="body">New ship speed</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="404">Ship not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/ships/{name}/topSpeed")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateShipSpeed")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Ship not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdateShipSpeed([FromRoute (Name = "name")][Required]string name, [FromBody]int body)
        {
           try
            {
            var ship = await _context.Ships.FirstOrDefaultAsync(s => s.Name == name);

            if (ship == null)
            {
            return NotFound($"Ship with name {name} not found.");
            }

            ship.Speed = body;
            await _context.SaveChangesAsync();

            return NoContent();
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }
    }
}
