/*
 * NAPA project
 *
 * NAPA trainee assignment
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using NAPAProject.Converters;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace NAPAProject.Models
{ 
    /// <summary>
    /// The specifications for a voyage
    /// </summary>
    [DataContract]
    public partial class AddVoyageRequest : IEquatable<AddVoyageRequest>
    {
        /// <summary>
        /// Used for a voyage&#39;s date.
        /// </summary>
        /// <value>Used for a voyage&#39;s date.</value>
        /* <example>Fri Jul 21 02:00:00 CEST 2017</example> */
        [DataMember(Name="date", EmitDefaultValue=true)]
        public DateOnly Date { get; set; }

        /// <summary>
        /// The name of a port.  Also functions as unique identifier.
        /// </summary>
        /// <value>The name of a port.  Also functions as unique identifier.</value>
        /* <example>Brindisi</example> */
        [RegularExpression("^.*?$")]
        [DataMember(Name="departurePort", EmitDefaultValue=false)]
        public string DeparturePort { get; set; }
        /// <summary>
        /// The name of a port.  Also functions as unique identifier.
        /// </summary>
        /// <value>The name of a port.  Also functions as unique identifier.</value>
        /* <example>Brindisi</example> */
        [RegularExpression("^.*?$")]
        [DataMember(Name="arrivalPort", EmitDefaultValue=false)]
        public string ArrivalPort { get; set; }

        /// <summary>
        /// A time used for arrivals/departures.
        /// </summary>
        /// <value>A time used for arrivals/departures.</value>
        /* <example>2024-11-27T10:00Z</example> */
        [DataMember(Name="startTime", EmitDefaultValue=true)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// A time used for arrivals/departures.
        /// </summary>
        /// <value>A time used for arrivals/departures.</value>
        /* <example>2024-11-27T10:00Z</example> */
        [DataMember(Name="endTime", EmitDefaultValue=true)]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddVoyageRequest {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DeparturePort: ").Append(DeparturePort).Append("\n");
            sb.Append("  ArrivalPort: ").Append(ArrivalPort).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddVoyageRequest)obj);
        }

        /// <summary>
        /// Returns true if AddVoyageRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AddVoyageRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddVoyageRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Date == other.Date ||
                    
                    Date.Equals(other.Date)
                ) && 
                (
                    DeparturePort == other.DeparturePort ||
                    DeparturePort != null &&
                    DeparturePort.Equals(other.DeparturePort)
                ) && 
                (
                    ArrivalPort == other.ArrivalPort ||
                    ArrivalPort != null &&
                    ArrivalPort.Equals(other.ArrivalPort)
                ) && 
                (
                    StartTime == other.StartTime ||
                    
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    
                    EndTime.Equals(other.EndTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (DeparturePort != null)
                    hashCode = hashCode * 59 + DeparturePort.GetHashCode();
                    if (ArrivalPort != null)
                    hashCode = hashCode * 59 + ArrivalPort.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AddVoyageRequest left, AddVoyageRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddVoyageRequest left, AddVoyageRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
