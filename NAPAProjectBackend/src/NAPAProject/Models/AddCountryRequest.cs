/*
 * NAPA project
 *
 * NAPA trainee assignment
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using NAPAProject.Converters;

namespace NAPAProject.Models
{ 
    /// <summary>
    /// The name of the country and if it has been visited
    /// </summary>
    [DataContract]
    public partial class AddCountryRequest : IEquatable<AddCountryRequest>
    {
        /// <summary>
        /// The name of a country. Also functions as unique identifier.
        /// </summary>
        /// <value>The name of a country. Also functions as unique identifier.</value>
        /* <example>France</example> */
        [RegularExpression("^.*?$")]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates if a country has been visited.
        /// </summary>
        /// <value>Indicates if a country has been visited.</value>
        [DataMember(Name="visited", EmitDefaultValue=false)]
        public bool Visited { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddCountryRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Visited: ").Append(Visited).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AddCountryRequest)obj);
        }

        /// <summary>
        /// Returns true if AddCountryRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AddCountryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddCountryRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Visited == other.Visited ||
                    
                    Visited.Equals(other.Visited)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Visited.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AddCountryRequest left, AddCountryRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AddCountryRequest left, AddCountryRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
