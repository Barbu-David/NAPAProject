/*
 * NAPA project
 *
 * NAPA trainee assignment
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using NAPAProject.Attributes;
using NAPAProject.Models;

namespace NAPAProject.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PortsApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a new port to the data base</remarks>
        /// <param name="addPortRequest">Port details</param>
        /// <response code="201">Port created successfully</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/ports")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddPort")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Port created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public virtual IActionResult AddPort([FromBody]AddPortRequest addPortRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);
            string exampleJson = null;
            exampleJson = "\"Brindisi\"";
            exampleJson = "\"Error\"";
            exampleJson = "\"Error\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a port</remarks>
        /// <param name="name">The name for a port.</param>
        /// <response code="204">Successful delete</response>
        /// <response code="404">Port not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/ports/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePort")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Port not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public virtual IActionResult DeletePort([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get the names of all the ports in the data base</remarks>
        /// <response code="200">The list of all port names.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/ports")]
        [ValidateModelState]
        [SwaggerOperation("GetPorts")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "The list of all port names.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public virtual IActionResult GetPorts()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);
            string exampleJson = null;
            exampleJson = "[ \"Brindisi\", \"Brindisi\" ]";
            exampleJson = "\"Error\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            : default;
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a port&#39;s country ?!</remarks>
        /// <param name="name">The name for a port.</param>
        /// <param name="body">New country name</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="404">Port not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/ports/{name}/country")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePortCountry")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Port not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public virtual IActionResult UpdatePortCountry([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Updates a port&#39;s name</remarks>
        /// <param name="name">The name for a port.</param>
        /// <param name="body">New port name</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="404">Port not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/ports/{name}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePortName")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Port not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public virtual IActionResult UpdatePortName([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default);

            throw new NotImplementedException();
        }
    }
}
