/*
 * NAPA project
 *
 * NAPA trainee assignment
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using NAPAProject.Attributes;
using NAPAProject.Models;
using NAPAProject.Data;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Linq;

namespace NAPAProject.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PortsApiController : ControllerBase
    {         
        
        private readonly AppDbContext _context;

        public PortsApiController(AppDbContext context)
        {
            _context = context;
        }


        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a new port to the data base</remarks>
        /// <param name="addPortRequest">Port details</param>
        /// <response code="201">Port created successfully</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="500">Internal server error</response>

        [HttpPost]
        [Route("/ports")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddPort")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Port created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> AddPort([FromBody]AddPortRequest addPortRequest)
        {
            if (!ModelState.IsValid)
                return BadRequest("Invalid port data.");

            bool countryExists = await _context.Countries.AnyAsync(c => c.Name == addPortRequest.Country);
            if (!countryExists)
                return BadRequest($"Country '{addPortRequest.Country}' does not exist.");

            var port = new Port
            {
                CountryName  = addPortRequest.Country,
                Name=addPortRequest.Name
            };

            try
            {
                _context.Ports.Add(port);
                await _context.SaveChangesAsync();
                return Created($"/ports/{Uri.EscapeDataString(port.Name)}", port.Name);
            }
            catch (DbUpdateException dbEx)
            {
                        if (dbEx.InnerException?.Message.Contains("UNIQUE constraint failed") == true)
                        {
                              return BadRequest($"A port with the name '{port.Name}' already exists.");
                        }
                        if (dbEx.InnerException?.Message.Contains("FOREIGN KEY constraint failed") == true)
                            return BadRequest($"Invalid country '{port.CountryName}'.");
                return StatusCode(500, "An error occurred while saving the port.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a port</remarks>
        /// <param name="name">The name for a port.</param>
        /// <response code="204">Successful delete</response>
        /// <response code="404">Port not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/ports/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePort")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Port not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> DeletePort([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name)
        {
            try
            {
                var port = await _context.Ports.FindAsync(name);

                if (port == null)
                {
                     return NotFound($"Port with name '{name}' not found.");
                }

                _context.Ports.Remove(port);
                await _context.SaveChangesAsync();

                return NoContent(); // 204
            }
            catch (DbUpdateException)
            {
                return StatusCode(500, "A database error occurred while deleting the ship.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get the names of all the ports in the data base</remarks>
        /// <response code="200">The list of all port names.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/ports")]
        [ValidateModelState]
        [SwaggerOperation("GetPorts")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "The list of all port names.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetPorts()
        {
                try
                {
                    var allPorts = await _context.Ports.ToListAsync(); 
                    var portNames = allPorts.Select(s => s.Name).ToList(); 

                    return Ok(portNames);
                }
                catch (Exception)
                {
                    return StatusCode(500, "A database error occurred.");
                }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a port&#39;s country ?!</remarks>
        /// <param name="name">The name for a port.</param>
        /// <param name="body">New country name</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="404">Port not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/ports/{name}/country")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePortCountry")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Port not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdatePortCountry([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name, [FromBody]string body)
        {
            try
            {
            var port = await _context.Ports.FirstOrDefaultAsync(s => s.Name == name);

            if (port == null)
            {
            return NotFound($"Port with name {name} not found.");
            }
           
            bool countryExists = await _context.Countries.AnyAsync(c => c.Name == body);
            if (!countryExists)
                return BadRequest($"Country '{body}' does not exist.");

            port.CountryName = body;
            await _context.SaveChangesAsync();

            return NoContent();
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Updates a port&#39;s name</remarks>
        /// <param name="name">The name for a port.</param>
        /// <param name="body">New port name</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="404">Port not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/ports/{name}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePortName")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Port not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdatePortName([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name, [FromBody]string body)
        {
            if(string.IsNullOrWhiteSpace(body))
            {
                return BadRequest("New name must be a non-empty string.");
            }

            try
            {
                var existingPort = await _context.Ports.FindAsync(name);
                if (existingPort == null)
                {
                    return NotFound($"Port with name '{name}' not found.");
                }

                var nameConflict = await _context.Ships.AnyAsync(s => s.Name == body);
                if (nameConflict)
                {
                    return BadRequest($"A port with name '{body}' already exists.");
                }
   
                var renamedPort = new Port
                {
                Name = body,
                CountryName = existingPort.CountryName
                };

                _context.Ports.Add(renamedPort);
                _context.Ports.Remove(existingPort);
                await _context.SaveChangesAsync();

                return NoContent();
            }
            catch (Exception)
            {   
                return StatusCode(500, "A database error occurred.");
            }
        }
    }
}
