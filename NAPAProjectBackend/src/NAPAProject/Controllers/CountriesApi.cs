/*
 * NAPA project
 *
 * NAPA trainee assignment
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using NAPAProject.Attributes;
using NAPAProject.Models;
using NAPAProject.Data;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Linq;


namespace NAPAProject.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>

    [ApiController]
    public class CountriesApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
    
        private readonly AppDbContext _context;

        public CountriesApiController(AppDbContext context)
        {
            _context = context;
        }

        /// <remarks>Adds a new country to the data base</remarks>
        /// <param name="addCountryRequest">Country details</param>
        /// <response code="201">Country created successfully</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/countries")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddCountry")]
        [SwaggerResponse(statusCode: 201, type: typeof(string), description: "Country created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> AddCountry([FromBody]AddCountryRequest addCountryRequest)
        {

            if (!ModelState.IsValid)
                return BadRequest("Invalid country data.");
            
            var country = new Country
            {
                Name  = addCountryRequest.Name,
                Visited = addCountryRequest.Visited
            };

            try
            {
                _context.Countries.Add(country);
                await _context.SaveChangesAsync();
                return Created($"/countries/{Uri.EscapeDataString(country.Name)}", country.Name);
            }
            catch (DbUpdateException dbEx)
            {
                        if (dbEx.InnerException?.Message.Contains("UNIQUE constraint failed") == true)
                         {
                              return BadRequest($"A country with the name '{country.Name}' already exists.");
                        }

                return StatusCode(500, "An error occurred while saving the country.");
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a country</remarks>
        /// <param name="name">The name for a country.</param>
        /// <response code="204">Successful delete</response>
        /// <response code="404">Country not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/countries/{name}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteCountry")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Country not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult>  DeleteCountry([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name)
        {
            try
            {
                var country = await _context.Countries.FindAsync(name);

                if (country == null)
                {
                     return NotFound($"Country with name '{name}' not found.");
                }

                _context.Countries.Remove(country);
                await _context.SaveChangesAsync();

                return NoContent(); // 204
            }
            catch (DbUpdateException)
            {
                return StatusCode(500, "A database error occurred while deleting the country.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieves the names of all the countries in the data base</remarks>
        /// <response code="200">The list of all country names.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/countries")]
        [ValidateModelState]
        [SwaggerOperation("GetCountries")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "The list of all country names.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetCountries()
        {
                try
                {
                    var allCountries = await _context.Countries.ToListAsync(); 
                    var countryNames = allCountries.Select(s => s.Name).ToList(); 

                    return Ok(countryNames);
                }
                catch (Exception)
                {
                    return StatusCode(500, "A database error occurred.");
                }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a countries name</remarks>
        /// <param name="name">The name for a country.</param>
        /// <param name="body">New country name</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="404">Country not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/countries/{name}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetCountryName")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Country not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdateCountryName([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name, [FromBody]string body)
        {
            if (string.IsNullOrWhiteSpace(body))
            {
            return BadRequest("New name must be a non-empty string.");
            }

            try
            {
                var existingCountry = await _context.Countries.FindAsync(name);
                if (existingCountry == null)
                {
                    return NotFound($"Ship with name '{name}' not found.");
                }

                // Check if a country already exists with the new name
                var nameConflict = await _context.Countries.AnyAsync(s => s.Name == body);
                if (nameConflict)
                {
                    return BadRequest($"A country with name '{body}' already exists.");
                }

                var renamedCountry = new Country
                {
                Name = body,
                Visited = existingCountry.Visited
                };

                _context.Countries.Add(renamedCountry);
                _context.Countries.Remove(existingCountry);
                await _context.SaveChangesAsync();

                return NoContent();
        }
        catch (Exception)
        {   
            return StatusCode(500, "A database error occurred.");
        }
        
        }
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>See if a country has been visited</remarks>
        /// <param name="name">The name for a country.</param>
        /// <response code="200">If a country has been visited</response>
        /// <response code="404">Country not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/countries/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GetCountryVisited")]
        [SwaggerResponse(statusCode: 200, type: typeof(bool), description: "If a country has been visited")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Country not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetCountryVisited([FromRoute (Name = "name")][Required][RegularExpression("^.*?$")]string name)
        {
            try
            {
            var country = await _context.Countries.FirstOrDefaultAsync(s => s.Name == name);

            if (country == null)
            {
               return NotFound($"Country with name {name} not found.");
            }

           return Ok(country.Visited);
            }
            catch (Exception)
            {
                return StatusCode(500, "A database error occurred.");
            }
        }
    }
}
