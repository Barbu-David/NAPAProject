/*
 * NAPA project
 *
 * NAPA trainee assignment
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using NAPAProject.Attributes;
using NAPAProject.Models;
using NAPAProject.Data;
using Microsoft.EntityFrameworkCore;
using System.Threading.Tasks;
using System.Linq;

namespace NAPAProject.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VoyagesApiController : ControllerBase
    { 

        private readonly AppDbContext _context;

        public VoyagesApiController(AppDbContext context)
        {
            _context = context;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Add a new voyage.</remarks>
        /// <param name="addVoyageRequest">Voyage details</param>
        /// <response code="201">Voyage created successfully</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="500">Internal server error</response>
        [HttpPost]
        [Route("/voyages")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddVoyage")]
        [SwaggerResponse(statusCode: 201, type: typeof(int), description: "Voyage created successfully")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> AddVoyage([FromBody]AddVoyageRequest addVoyageRequest)
        {
            if (!ModelState.IsValid)
                return BadRequest("Invalid voyage data.");

            if(addVoyageRequest.StartTime>addVoyageRequest.EndTime)
                return BadRequest("Invalid voyage data.  Start time must be no later than end time");

            bool portArrivalExists = await _context.Ports.AnyAsync(c => c.Name == addVoyageRequest.ArrivalPort);
            if (!portArrivalExists)
                return BadRequest($"Country '{addVoyageRequest.ArrivalPort}' does not exist.");
           
            bool portDepartureExists = await _context.Ports.AnyAsync(c => c.Name == addVoyageRequest.DeparturePort);
            if (!portArrivalExists)
                return BadRequest($"Country '{addVoyageRequest.ArrivalPort}' does not exist.");

            var voyage = new Voyage
            {
               Date=addVoyageRequest.Date,
               DeparturePort=addVoyageRequest.DeparturePort,
               ArrivalPort=addVoyageRequest.ArrivalPort,
               StartTime=addVoyageRequest.StartTime,
               EndTime=addVoyageRequest.EndTime
            };

            try
            {
                _context.Voyages.Add(voyage);
                await _context.SaveChangesAsync();
                var uri = $"/voyages/{voyage.Id}";
                return Created(uri, voyage.Id);
            }
            catch (DbUpdateException dbEx)
            {
    
                        if (dbEx.InnerException?.Message.Contains("FOREIGN KEY constraint failed") == true)
                            return BadRequest($"Invalid port(s).");
                return StatusCode(500, "An error occurred while saving the port.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete a voyage</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <response code="204">Successful delete</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpDelete]
        [Route("/voyages/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteVoyage")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> DeleteVoyage([FromRoute (Name = "id")][Required]int id)
        {
            try
            {
                var voyage = await _context.Voyages.FindAsync(id);

                if (voyage == null)
                {
                     return NotFound($"Voyage not found.");
                }

                _context.Voyages.Remove(voyage);
                await _context.SaveChangesAsync();

                return NoContent(); // 204
            }
            catch (DbUpdateException)
            {
                return StatusCode(500, "A database error occurred while deleting the ship.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a voyage&#39;s arrival port</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <response code="200">Voyage arrival port</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/voyages/{id}/arrivalPort")]
        [ValidateModelState]
        [SwaggerOperation("GetVoyageAPort")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Voyage arrival port")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetVoyageAPort([FromRoute (Name = "id")][Required]int id)
        {
            try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
            return NotFound($"Voyage not found.");
            }
            return Ok(voyage.ArrivalPort);
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a voyage&#39;s departure port</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <response code="200">Voyage departure port</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/voyages/{id}/departurePort")]
        [ValidateModelState]
        [SwaggerOperation("GetVoyageDPort")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Voyage departure port")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetVoyageDPort([FromRoute (Name = "id")][Required]int id)
        {
            try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
            return NotFound($"Voyage not found.");
            }
            return Ok(voyage.DeparturePort);
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a voyage&#39;s date</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <response code="200">Voyage date</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/voyages/{id}/date")]
        [ValidateModelState]
        [SwaggerOperation("GetVoyageDate")]
        [SwaggerResponse(statusCode: 200, type: typeof(DateOnly), description: "Voyage date")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetVoyageDate([FromRoute (Name = "id")][Required]int id)
        {
            try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
            return NotFound($"Voyage not found.");
            }
            return Ok(voyage.Date);
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a voyage&#39;s end time</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <response code="200">Voyage start time</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/voyages/{id}/end")]
        [ValidateModelState]
        [SwaggerOperation("GetVoyageEnd")]
        [SwaggerResponse(statusCode: 200, type: typeof(DateTime), description: "Voyage start time")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetVoyageEnd([FromRoute (Name = "id")][Required]int id)
        {
            try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
            return NotFound($"Voyage not found.");
            }
            return Ok(voyage.EndTime);
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a voyage&#39;s start time</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <response code="200">Voyage start time</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/voyages/{id}/start")]
        [ValidateModelState]
        [SwaggerOperation("GetVoyageStart")]
        [SwaggerResponse(statusCode: 200, type: typeof(DateTime), description: "Voyage start time")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetVoyageStart([FromRoute (Name = "id")][Required]int id)
        {
            try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
            return NotFound($"Voyage not found.");
            }
            return Ok(voyage.StartTime);
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get all voyage ids.</remarks>
        /// <response code="200">The list of all voyage ids.</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/voyages")]
        [ValidateModelState]
        [SwaggerOperation("GetVoyages")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<int>), description: "The list of all voyage ids.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> GetVoyages()
        {
                try
                {
                    var allVoyages = await _context.Voyages.ToListAsync(); 
                    var voyageIds = allVoyages.Select(s => s.Id).ToList(); 

                    return Ok(voyageIds);
                }
                catch (Exception)
                {
                    return StatusCode(500, "A database error occurred.");
                }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a voyage&#39;s arrival port</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <param name="body">New port</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="403">Forbidden. Departure port can&#39;t be the same as the arrival port</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/voyages/{id}/arrivalPort")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVoyageAPort")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 403, type: typeof(string), description: "Forbidden. Departure port can&#39;t be the same as the arrival port")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdateVoyageAPort([FromRoute (Name = "id")][Required]int id, [FromBody]string body)
        {
            try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
                return NotFound($"Voyage not found.");
            }

            bool portExists = await _context.Ports.AnyAsync(c => c.Name == body);
            if (!portExists)
                return BadRequest($"Port '{body}' does not exist.");

            voyage.ArrivalPort = body;
            await _context.SaveChangesAsync();

            return NoContent();
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a voyage&#39;s departure port</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <param name="body">New port</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="403">Forbidden. Departure port can&#39;t be the same as the arrival port</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/voyages/{id}/departurePort")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVoyageDPort")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 403, type: typeof(string), description: "Forbidden. Departure port can&#39;t be the same as the arrival port")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdateVoyageDPort([FromRoute (Name = "id")][Required]int id, [FromBody]string body)
        {

           try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
                return NotFound($"Voyage not found.");
            }

            bool portExists = await _context.Ports.AnyAsync(c => c.Name == body);
            if (!portExists)
                return BadRequest($"Port '{body}' does not exist.");

            voyage.DeparturePort = body;
            await _context.SaveChangesAsync();

            return NoContent();
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a voyage&#39;s date</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <param name="body">New date</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/voyages/{id}/date")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVoyageDate")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdateVoyageDate([FromRoute (Name = "id")][Required]int id, [FromBody]DateOnly body)
        {
           try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
                return NotFound($"Voyage not found.");
            }

            voyage.Date = body;
            await _context.SaveChangesAsync();

            return NoContent();
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a voyage&#39;s end time</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <param name="body">New port time</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="403">Forbidden. End time can&#39;t be later than start time.</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/voyages/{id}/end")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVoyageEnd")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 403, type: typeof(string), description: "Forbidden. End time can&#39;t be later than start time.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdateVoyageEnd([FromRoute (Name = "id")][Required]int id, [FromBody]DateTime body)
        {
            try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
                return NotFound($"Voyage not found.");
            }

            if(voyage.StartTime<body)
                return Forbid("End time can be no sooner than start time");

            voyage.EndTime = body;
            await _context.SaveChangesAsync();

            return NoContent();
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Update a voyage&#39;s start time</remarks>
        /// <param name="id">The id for a voyage.</param>
        /// <param name="body">New port time</param>
        /// <response code="204">Successful update</response>
        /// <response code="400">Invalid input or parameters.</response>
        /// <response code="403">Forbidden. Start time can&#39;t be sooner than end time.</response>
        /// <response code="404">Voyage not found.</response>
        /// <response code="500">Internal server error</response>
        [HttpPut]
        [Route("/voyages/{id}/start")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVoyageStart")]
        [SwaggerResponse(statusCode: 400, type: typeof(string), description: "Invalid input or parameters.")]
        [SwaggerResponse(statusCode: 403, type: typeof(string), description: "Forbidden. Start time can&#39;t be sooner than end time.")]
        [SwaggerResponse(statusCode: 404, type: typeof(string), description: "Voyage not found.")]
        [SwaggerResponse(statusCode: 500, type: typeof(string), description: "Internal server error")]
        public async Task<IActionResult> UpdateVoyageStart([FromRoute (Name = "id")][Required]int id, [FromBody]DateTime body)
        {
            try
            {
            var voyage = await _context.Voyages.FirstOrDefaultAsync(s => s.Id == id);

            if (voyage == null)
            {
                return NotFound($"Voyage not found.");
            }

            if(voyage.EndTime<body)
                return Forbid("Start time can be no sooner than end time");

            voyage.StartTime = body;
            await _context.SaveChangesAsync();

            return NoContent();
            }
            catch (Exception)
            {
            return StatusCode(500, "A database error occurred.");
            }
        }
    }
}
